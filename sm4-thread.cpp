#include <stdio.h>
#include<iostream>
#include<vector>
#include<thread>
#include<ctime>
#include<windows.h>
#include<stdlib.h>
using namespace std;
#define u8 unsigned char
#define u32 unsigned long
#define M 2
//S盒, 12 => 9a
const u8 Sbox[16][16] =
{
{0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05},
{0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99},
{0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62},
{0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6},
{0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8},
{0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35},
{0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87},
{0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e},
{0xea,0xbf,0x8a,0xd2,0x40,0xc7,0x38,0xb5,0xa3,0xf7,0xf2,0xce,0xf9,0x61,0x15,0xa1},
{0xe0,0xae,0x5d,0xa4,0x9b,0x34,0x1a,0x55,0xad,0x93,0x32,0x30,0xf5,0x8c,0xb1,0xe3},
{0x1d,0xf6,0xe2,0x2e,0x82,0x66,0xca,0x60,0xc0,0x29,0x23,0xab,0x0d,0x53,0x4e,0x6f},
{0xd5,0xdb,0x37,0x45,0xde,0xfd,0x8e,0x2f,0x03,0xff,0x6a,0x72,0x6d,0x6c,0x5b,0x51},
{0x8d,0x1b,0xaf,0x92,0xbb,0xdd,0xbc,0x7f,0x11,0xd9,0x5c,0x41,0x1f,0x10,0x5a,0xd8},
{0x0a,0xc1,0x31,0x88,0xa5,0xcd,0x7b,0xbd,0x2d,0x74,0xd0,0x12,0xb8,0xe5,0xb4,0xb0},
{0x89,0x69,0x97,0x4a,0x0c,0x96,0x77,0x7e,0x65,0xb9,0xf1,0x09,0xc5,0x6e,0xc6,0x84},
{0x18,0xf0,0x7d,0xec,0x3a,0xdc,0x4d,0x20,0x79,0xee,0x5f,0x3e,0xd7,0xcb,0x39,0x48}
};
//固定参数
const u32 CK[32] =
{
0x00070e15,0x1c232a31,0x383f464d,0x545b6269,
0x70777e85,0x8c939aa1,0xa8afb6bd,0xc4cbd2d9,
0xe0e7eef5,0xfc030a11,0x181f262d,0x343b4249,
0x50575e65,0x6c737a81,0x888f969d,0xa4abb2b9,
0xc0c7ced5,0xdce3eaf1,0xf8ff060d,0x141b2229,
0x30373e45,0x4c535a61,0x686f767d,0x848b9299,
0xa0a7aeb5,0xbcc3cad1,0xd8dfe6ed,0xf4fb0209,
0x10171e25,0x2c333a41,0x484f565d,0x646b7279
};

//系统参数
const u32 FK[4] = { 0xa3b1bac6,0x56aa3350,0x677d9197,0xb27022dc };
u32 MK[4];		//加密密钥MK
//轮密钥
long rk[32];
long rk1[32];

//明文，每个元素为一个字，每个字32bit
u32 Plain[4];

u32 LoopLeft(unsigned long Input, int n) {
	u32 Output;
	Output = (Input << n) | (Input >> (32 - n));
	return Output;
}


unsigned int Transt_int(unsigned int temp) {
	return Sbox[temp >> 4][temp & 0xf];	
}

u32 temp[4];

void transtAtoB(u32 t, int n, int i) {
	temp[i] |= (unsigned long)Transt_int((unsigned int)(t >> n) & 0xff);
	temp[i] <<= n;
}

u32 Transt(u32 rki) {
	u32 rki_aftert = 0;		//输出t置换之后的rki
	for (int i = 0; i < 4; i++) {
		temp[i] = 0;
	}
	thread t1(transtAtoB, rki, 24, 0);
	thread t2(transtAtoB, rki, 16, 1);
	thread t3(transtAtoB, rki, 8, 2);
	thread t4(transtAtoB, rki, 0, 3);
	t1.join();
	t2.join();
	t3.join();
	t4.join();
	rki_aftert = temp[0] | temp[1] | temp[2] | temp[3];
	return rki_aftert;
}
//L'变换
u32 TransL_1(u32 rki_aftert) {
	return rki_aftert ^ LoopLeft(rki_aftert, 13) ^ LoopLeft(rki_aftert, 23);
}

//T'置换，由t变换(Sbox)和L'变换复合
u32 TransT_1(u32 temp) {
	return TransL_1(Transt(temp));
}

//L变换
u32 TransL(u32 temp_aftert) {
	return temp_aftert ^ LoopLeft(temp_aftert, 2) ^ LoopLeft(temp_aftert, 10) ^ LoopLeft(temp_aftert, 18) ^ LoopLeft(temp_aftert, 24);
}

//T置换
u32 TransT(u32 temp) {
	return TransL(Transt(temp));
}

//F轮函数
u32 Ffunc(u32 X0, u32 X1, u32 X2, u32 X3, u32 rk) {
	return X0 ^ TransT(X1 ^ X2 ^ X3 ^ rk);
}

u32 generateMK(u32 key0, u32 key1, u32 key2, u32 key3) {
	u32 MKi;
	MKi = (key0 << 24) | (key1 << 16) | (key2 << 8) | key3;
	return MKi;
}

//生成轮密钥
void generaterk(u32 MK[4], int n) {
	//生成K
	u32 K[4];
	int i;
	for (i = 0; i < 4; i++) {
		K[i] = MK[i] ^ FK[i];
	}

	rk1[0] = K[0] ^ TransT_1(K[1] ^ K[2] ^ K[3] ^ CK[0]);    
	rk1[1] = K[1] ^ TransT_1(K[2] ^ K[3] ^ rk1[0] ^ CK[1]);	
	rk1[2] = K[2] ^ TransT_1(K[3] ^ rk1[0] ^ rk1[1] ^ CK[2]);
	rk1[3] = K[3] ^ TransT_1(rk1[0] ^ rk1[1] ^ rk1[2] ^ CK[3]);
	for (i = 4; i < 32; i++)
	{
		rk1[i] = rk1[i - 4] ^ TransT_1(rk1[i - 3] ^ rk1[i - 2] ^ rk1[i - 1] ^ CK[i]);
	}
	if (n == 1)
		for (int j = 0; j < 32; j++)
		{
			rk[j] = rk1[31 - j];
		}
	else
		for (int j = 0; j < 32; j++)
		{
			rk[j] = rk1[j];
		}
}

void SM4(u32 X[4], u32 MK[4], int n) { //n!=1 加密；n==1 解密
	u32 temp;
	generaterk(MK, n);
	for (int i = 0; i < 4; i++) {
		Plain[i] = X[i];
	}
	for (int i = 0; i < 32; i++) {
		temp = Ffunc(Plain[0], Plain[1], Plain[2], Plain[3], rk[i]);
		//将所得的结果放入Plain当中
		Plain[0] = Plain[1];
		Plain[1] = Plain[2];
		Plain[2] = Plain[3];
		Plain[3] = temp;
	}
	//反序变换(Y0, Y1, Y2, Y3) = (X35, X34, X33, X32)
	//0和3换
	temp = Plain[0];
	Plain[0] = Plain[3];
	Plain[3] = temp;
	//1和2换
	temp = Plain[1];
	Plain[1] = Plain[2];
	Plain[2] = temp;
}
u8 MM[128] = { 0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05,
	0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99,
	0x9c,0x42,0x50,0xf4,0x91,0xef,0x98,0x7a,0x33,0x54,0x0b,0x43,0xed,0xcf,0xac,0x62,
	0xe4,0xb3,0x1c,0xa9,0xc9,0x08,0xe8,0x95,0x80,0xdf,0x94,0xfa,0x75,0x8f,0x3f,0xa6,
	0x47,0x07,0xa7,0xfc,0xf3,0x73,0x17,0xba,0x83,0x59,0x3c,0x19,0xe6,0x85,0x4f,0xa8,
	0x68,0x6b,0x81,0xb2,0x71,0x64,0xda,0x8b,0xf8,0xeb,0x0f,0x4b,0x70,0x56,0x9d,0x35,
	0x1e,0x24,0x0e,0x5e,0x63,0x58,0xd1,0xa2,0x25,0x22,0x7c,0x3b,0x01,0x21,0x78,0x87,
	0xd4,0x00,0x46,0x57,0x9f,0xd3,0x27,0x52,0x4c,0x36,0x02,0xe7,0xa0,0xc4,0xc8,0x9e };
u8 MM1[16] = { 0xd6,0x90,0xe9,0xfe,0xcc,0xe1,0x3d,0xb7,0x16,0xb6,0x14,0xc2,0x28,0xfb,0x2c,0x05 };
u8 MM2[16] = { 0x2b,0x67,0x9a,0x76,0x2a,0xbe,0x04,0xc3,0xaa,0x44,0x13,0x26,0x49,0x86,0x06,0x99 };

void decsk(int k) {
	u32 MIN[4];
	u32 plain[4];
	MIN[0] = generateMK(MM[16 * k + 0], MM[16 * k + 1], MM[16 * k + 2], MM[16 * k + 3]);
	MIN[1] = generateMK(MM[16 * k + 4], MM[16 * k + 5], MM[16 * k + 6], MM[16 * k + 7]);
	MIN[2] = generateMK(MM[16 * k + 8], MM[16 * k + 9], MM[16 * k + 10], MM[16 * k + 11]);
	MIN[3] = generateMK(MM[16 * k + 12], MM[16 * k + 13], MM[16 * k + 14], MM[16 * k + 15]);
	for (int i = 0; i < 4; i++) {
		plain[i] = MIN[i];
	}
	SM4(plain, MK, 0);

}

void decsk1(u32 MK[4]) {
	u32 MIN[4];
	u32 plain[4];
	MIN[0] = generateMK(MM1[0], MM1[1], MM1[2], MM1[3]);
	MIN[1] = generateMK(MM1[4], MM1[5], MM1[6], MM1[7]);
	MIN[2] = generateMK(MM1[8], MM1[9], MM1[10], MM1[11]);
	MIN[3] = generateMK(MM1[12], MM1[13], MM1[14], MM1[15]);
	for (int i = 0; i < 4; i++) {
		plain[i] = MIN[i];
	}
	SM4(plain, MK, 0);
}
void decsk2(u32 MK[4]) {
	u32 MIN2[4];
	u32 plain[4];
	MIN2[0] = generateMK(MM2[0], MM2[1], MM2[2], MM2[3]);
	MIN2[1] = generateMK(MM2[4], MM2[5], MM2[6], MM2[7]);
	MIN2[2] = generateMK(MM2[8], MM2[9], MM2[10], MM2[11]);
	MIN2[3] = generateMK(MM2[12], MM2[13], MM2[14], MM2[15]);
	for (int i = 0; i < 4; i++) {
		plain[i] = MIN2[i];
	}
	SM4(plain, MK, 0);
	//输出结果
}
int main() {
	//输入密钥
	u8 key[16] = { 0x01,0x23,0x45,0x67,0x89,0xab,0xcd,0xef,0xfe,0xdc,0xba,0x98,0x76,0x54,0x32,0x10 };       //定义16字节的密钥
	int num = 8;
	u32 mk[4];
	MK[0] = generateMK(key[0], key[1], key[2], key[3]);
	MK[1] = generateMK(key[4], key[5], key[6], key[7]);
	MK[2] = generateMK(key[8], key[9], key[10], key[11]);
	MK[3] = generateMK(key[12], key[13], key[14], key[15]);
	for (int i = 0; i < 4; i++) {
		mk[i] = MK[i];
	}
	u32 MIN[4];
	long f = clock();
	std::chrono::high_resolution_clock::time_point tpp1 = std::chrono::high_resolution_clock::now();
	for (int k = 0; k < num; k++) {
		decsk(k);
	}
	std::chrono::high_resolution_clock::time_point tpp2 = std::chrono::high_resolution_clock::now();
	long g = clock();
	std::chrono::duration<size_t, std::nano> durp = tpp2 - tpp1;
	int tp = durp.count();
	printf("%.8f\n", ((double)g - f) / CLOCKS_PER_SEC * 1000);
	printf("加解密时间:%uns", tp);
	cout << endl;
	std::chrono::high_resolution_clock::time_point tp1 = std::chrono::high_resolution_clock::now();
	thread t1(decsk1,MK); 
	thread t2(decsk2,mk); 
	t1.join();
	t2.join();
	std::chrono::high_resolution_clock::time_point tp2 = std::chrono::high_resolution_clock::now();
	std::chrono::duration<size_t, std::nano> dur = tp2 - tp1;
	int t = dur.count();
	printf("加解密时间:%uns", t);
	return 0;
}